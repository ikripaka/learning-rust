use num_traits::Num;
use rust_bigint::BigUint;

mod test {
    use num_traits::Num;
    use rust_bigint::BigUint;

    #[test]
    fn parsing() {
        // === HEX ===

        let mut x = "1";
        assert_eq!(get_lower_hex(x), trim_zeros(x));

        x = "";
        assert_eq!(get_lower_hex(x), "0");

        x = "000001";
        assert_eq!(get_lower_hex(x), trim_zeros("1"));

        x = "12345";
        assert_eq!(get_lower_hex(x), trim_zeros(x));

        x = "123456789011223344556677889900aa";
        assert_eq!(get_lower_hex(x), trim_zeros(x));

        x = "4D3C91C579C2C6216567A5\
                241614B561ADDF76C4BB659E6FE7F65FF76\
                A918C843F0458B3EF457BCD9022D78798A2\
                9462EC99C74E6674690267D3E9844251B39D";
        assert_eq!(get_upper_hex(x), trim_zeros(x));

        // === BIN ===

        x = "1";
        assert_eq!(get_binary(x), trim_zeros(x));

        x = "00100000001";
        assert_eq!(get_binary(x), trim_zeros(x));

        // 0x12345
        x = "10010001101000101";
        assert_eq!(get_binary(x), trim_zeros(x));

        // 0x123456789011223344556677889900aa
        x = "10010001101000101011001111000100100000001000100100010001100110100010001010101011001100111011110001000100110010000000010101010";
        assert_eq!(get_binary(x), trim_zeros(x));

        x = "4D3C91C579C2C6216567A5241614B561ADDF76C4BB659E6FE7F65FF76A918C843F0458B3EF457BCD9022D78798A29462EC99C74E6674690267D3E9844251B39D";
        assert_eq!(get_binary_from_hex(x), trim_zeros("01001101001111001001000111000101011110011100001011000110001000010110010101100111101001010010010000010110000101001011010101100001101011011101111101110110110001001011101101100101100111100110111111100111111101100101111111110111011010101001000110001100100001000011111100000100010110001011001111101111010001010111101111001101100100000010001011010111100001111001100010100010100101000110001011101100100110011100011101001110011001100111010001101001000000100110011111010011111010011000010001000010010100011011001110011101"));
    }

    #[test]
    fn test_fitting() {
        let mut x = "0000 00000  0000 0000 0000 0001";
        assert_eq!(format!("{:?}", from_hex(x)), "[1]");

        x = "0000 00000 0000 00000  0000 00000 0000 00000  0000 00000 0000 00000  ABCD 0000 0000 0000  0000 0000 0000 0001";
        assert_eq!(format!("{:?}", from_hex(x)), "[1, ABCD000000000000]");
    }

    #[test]
    fn test_comparison() {
        let (mut x, mut y) = ("1", "0");
        assert_eq!(from_hex(x) > from_hex(y), true);

        (x, y) = ("1", "1");
        assert_eq!(from_hex(x) > from_hex(y), false);

        (x, y) = ("1", "1");
        assert_eq!(from_hex(x) >= from_hex(y), true);

        (x,y) = ("3340E61CE70224FE109AA852D618FFBA53E9779C33B7782F73E55944AF6D54B75B7B537E2C57ADC8534A38433960F92DAF604D4F45FCD205280C63684FD3A711",
                 "4440E61CE70224FE109AA852D618FFBA53E9779C33B7782F73E55944AF6D54B75B7B537E2C57ADC8534A38433960F92DAF604D4F45FCD205280C63684FD3A711");
        assert_eq!(from_hex(x) < from_hex(y), true);

        (x,y) = ("3340E61CE70224FE109AA852D618FFBA53E9779C33B7782F73E55944AF6D54B75B7B537E2C57ADC8534A38433960F92DAF604D4F45FCD205280C63684FD3A711",
                 "3340E61CE70224FE109AA852D618FFBA53E9779C33B7782F73E55944AF6D54B75B7B537E2C57ADC8534A38433960F92DAF604D4F45FCD205280C63684FD3A711");
        assert_eq!(from_hex(x) == from_hex(y), true);

        (x,y) = ("3340E61CE70224FE109AA852D618FFBA53E9779C33B7782F73E55944AF6D54B75B7B537E2C57ADC8534A3 7 433960F92DAF604D4F45FCD205280C63684FD3A711",
                  "3440E61CE70224FE109AA852D618FFBA53E9779C33B7782F73E55944AF6D54B75B7B537E2C57ADC8534A3 0 433960F92DAF604D4F45FCD205280C63684FD3A711");
        assert_eq!(from_hex(x) > from_hex(y), true);

        (x,y) = ("3340E61CE70224FE109AA852D618FFBA53E9779C33B7782F73E55944AF6D54B75B7B537E2C57ADC8534A3 7 433960F92DAF604D4F45FCD205280C63684FD3A711",
                  "3440E61CE70224FE109AA852D618FFBA53E9779C33B7782F73E55944AF6D54B75B7B537E2C57ADC8534A3 0 433960F92DAF604D4F45FCD205280C63684FD3A711");
        assert_eq!(from_hex(x) <= from_hex(y), false);

        (x, y) = ("12345", "123456");
        assert_eq!(from_hex(x) < from_hex(y), true);
        (x, y) = ("123456", "1234567");
        assert_eq!(from_hex(x) < from_hex(y), true);
        (x, y) = ("12345", "1234567");
        assert_eq!(from_hex(x) < from_hex(y), true);
    }

    #[test]
    fn test_addition() {
        let (mut x, mut y, mut z) = ("1", "0", "1");
        assert_eq!(from_hex(x) + from_hex(y), from_hex(z));

        ( x, y, z) = ("CED0F6B3027C4C0ED408A03EDC3011F72B9813BC664230CC5A831DA31C2D7E22B83E7E7DF3631A8CD55C3BCF00EC9EEDBAD11F0B2BA8854E7C7EFD2FE7FD0EAAF9F1B13297A99D396562777A0AEAEE7CAA0A3EFC4A1BB7685647FC25FBCB6D3D8B1EE4788248F0714932168D2BF19A3D0E078BCFF0AF4F64A14032AA67931823",
                      "9181DBCE994DAC85566FCA0CC60F56A5ABC1CA498862554B8BA6448769B94E2EC6A4A0032FC86892127406B8C3FCAE74A945FF3C92EBC41E927E2A595B72A53B57210CCD85102DFA79BD8457D1BD3CE37ADDAF1D383141F53F2E7897AED3D5A3525C9BB40B6EBD611F676881337D757885009E635253F5B80FFB79140C913A3E",
                      "16052D2819BC9F8942A786A4BA23F689CD759DE05EEA48617E629622A85E6CC517EE31E81232B831EE7D04287C4E94D6264171E47BE94496D0EFD2789436FB3E65112BE001CB9CB33DF1FFBD1DCA82B6024E7EE19824CF95D957674BDAA9F42E0DD7B802C8DB7ADD268997F0E5F6F0FB593082A334303451CB13BABBE74245261");
        assert_eq!(from_hex(x) + from_hex(y), from_hex(z));

        ( x, y, z) = ("3340E61CE70224FE109AA852D618FFBA53E9779C33B7782F73E55944AF6D54B75B7B537E2C57ADC8534A38433960F92DAF604D4F45FCD205280C63684FD3A711",
                      "27827BFFDE45CAF30918B836BC7AA7C9F99D26EE84C05CF3F5293B238038BA56B17057DF63B76ED964142BACA61A44E7EC562B371722A383D3F814C67D563E2E",
                      "5AC3621CC547EFF119B360899293A7844D869E8AB877D523690E94682FA60F0E0CEBAB5D900F1CA1B75E63EFDF7B3E159BB678865D1F7588FC04782ECD29E53F");
        assert_eq!(from_hex(x) + from_hex(y), from_hex(z));
    }

    #[test]
    fn test_subtraction() {
        let (mut x, mut y, mut z) = ("1", "0", "1");
        assert_eq!(from_hex(x) - from_hex(y), from_hex(z));

        (x, y, z) = ("1", "1", "0");
        assert_eq!(from_hex(x) - from_hex(y), from_hex(z));

        ( x, y, z) = ("CED0F6B3027C4C0ED408A03EDC3011F72B9813BC664230CC5A831DA31C2D7E22B83E7E7DF3631A8CD55C3BCF00EC9EEDBAD11F0B2BA8854E7C7EFD2FE7FD0EAAF9F1B13297A99D396562777A0AEAEE7CAA0A3EFC4A1BB7685647FC25FBCB6D3D8B1EE4788248F0714932168D2BF19A3D0E078BCFF0AF4F64A14032AA67931823",
                      "9181DBCE994DAC85566FCA0CC60F56A5ABC1CA498862554B8BA6448769B94E2EC6A4A0032FC86892127406B8C3FCAE74A945FF3C92EBC41E927E2A595B72A53B57210CCD85102DFA79BD8457D1BD3CE37ADDAF1D383141F53F2E7897AED3D5A3525C9BB40B6EBD611F676881337D757885009E635253F5B80FFB79140C913A3E",
                      "3D4F1AE4692E9F897D98D6321620BB517FD64972DDDFDB80CEDCD91BB2742FF3F199DE7AC39AB1FAC2E835163CEFF079118B1FCE98BCC12FEA00D2D68C8A696FA2D0A46512996F3EEBA4F322392DB1992F2C8FDF11EA75731719838E4CF7979A38C248C476DA331029CAAE0BF87424C48906ED6C9E5B59AC9144B9965B01DDE5");
        assert_eq!(from_hex(x) - from_hex(y), from_hex(z));

        ( x, y, z) = ("3340E61CE70224FE109AA852D618FFBA53E9779C33B7782F73E55944AF6D54B75B7B537E2C57ADC8534A38433960F92DAF604D4F45FCD205280C63684FD3A711",
                      "27827BFFDE45CAF30918B836BC7AA7C9F99D26EE84C05CF3F5293B238038BA56B17057DF63B76ED964142BACA61A44E7EC562B371722A383D3F814C67D563E2E",
                      "BBE6A1D08BC5A0B0781F01C199E57F05A4C50ADAEF71B3B7EBC1E212F349A60AA0AFB9EC8A03EEEEF360C969346B445C30A22182EDA2E8154144EA1D27D68E3");
        assert_eq!(from_hex(x) - from_hex(y), from_hex(z));
    }

    #[test]
    fn test_multiplication() {}

    fn from_hex(x: &str) -> BigUint {
        BigUint::from_str_radix(x, 16).unwrap()
    }

    fn get_binary_from_hex(x: &str) -> String {
        format!(
            "{}",
            BigUint::from_str_radix(x, 16).unwrap().to_binary_string()
        )
    }
    fn get_lower_hex(x: &str) -> String {
        format!(
            "{}",
            BigUint::from_str_radix(x, 16)
                .unwrap()
                .to_lower_hex_string()
        )
    }

    fn get_upper_hex(x: &str) -> String {
        format!(
            "{}",
            BigUint::from_str_radix(x, 16)
                .unwrap()
                .to_upper_hex_string()
        )
    }

    fn get_binary(x: &str) -> String {
        format!(
            "{}",
            BigUint::from_str_radix(x, 2).unwrap().to_binary_string()
        )
    }

    #[inline]
    fn trim_zeros<'a>(x: &'a str) -> &'a str {
        x.trim_start_matches("0")
    }
}
