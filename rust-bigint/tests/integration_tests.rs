use num_traits::Num;
use rust_bigint::BigUint;

mod test {
    use num_traits::{Num, Pow, ToPrimitive};
    use rust_bigint::BigUint;
    use std::cmp::Ordering;

    #[test]
    fn parsing() {
        // === HEX ===

        let mut x = "1";
        assert_eq!(get_lower_hex(x), trim_zeros(x));

        x = "";
        assert_eq!(get_lower_hex(x), "0");

        x = "000001";
        assert_eq!(get_lower_hex(x), trim_zeros("1"));

        x = "12345";
        assert_eq!(get_lower_hex(x), trim_zeros(x));

        x = "123456789011223344556677889900aa";
        assert_eq!(get_lower_hex(x), trim_zeros(x));

        x = "4D3C91C579C2C6216567A5\
                241614B561ADDF76C4BB659E6FE7F65FF76\
                A918C843F0458B3EF457BCD9022D78798A2\
                9462EC99C74E6674690267D3E9844251B39D";
        assert_eq!(get_upper_hex(x), trim_zeros(x));

        x = "CED0F6B3027C4C0ED408A03EDC3011F72B9813BC664230CC5A831DA31C2D7E22B83E7E7DF3631A8CD55C3BCF00EC9EEDBAD11F0B2BA8854E7C7EFD2FE7FD0EAAF9F1B13297A99D396562777A0AEAEE7CAA0A3EFC4A1BB7685647FC25FBCB6D3D8B1EE4788248F0714932168D2BF19A3D0E078BCFF0AF4F64A14032AA67931823";
        assert_eq!(get_upper_hex(x), trim_zeros(x));

        // === BIN ===

        x = "1";
        assert_eq!(get_binary(x), trim_zeros(x));

        x = "00100000001";
        assert_eq!(get_binary(x), trim_zeros(x));

        // 0x12345
        x = "10010001101000101";
        assert_eq!(get_binary(x), trim_zeros(x));

        // 0x123456789011223344556677889900aa
        x = "10010001101000101011001111000100100000001000100100010001100110100010001010101011001100111011110001000100110010000000010101010";
        assert_eq!(get_binary(x), trim_zeros(x));

        x = "4D3C91C579C2C6216567A5241614B561ADDF76C4BB659E6FE7F65FF76A918C843F0458B3EF457BCD9022D78798A29462EC99C74E6674690267D3E9844251B39D";
        assert_eq!(get_binary_from_hex(x), trim_zeros("01001101001111001001000111000101011110011100001011000110001000010110010101100111101001010010010000010110000101001011010101100001101011011101111101110110110001001011101101100101100111100110111111100111111101100101111111110111011010101001000110001100100001000011111100000100010110001011001111101111010001010111101111001101100100000010001011010111100001111001100010100010100101000110001011101100100110011100011101001110011001100111010001101001000000100110011111010011111010011000010001000010010100011011001110011101"));
    }

    #[test]
    fn test_fitting() {
        let mut x = "0000 00000  0000 0000 0000 0001";
        assert_eq!(format!("{:?}", from_hex(x)), "[1]");

        x = "0000 00000 0000 00000  0000 00000 0000 00000  0000 00000 0000 00000  ABCD 0000 0000 0000  0000 0000 0000 0001";
        assert_eq!(format!("{:?}", from_hex(x)), "[1, ABCD000000000000]");
    }

    #[test]
    fn test_comparison() {
        let (mut x, mut y) = ("1", "0");
        assert_eq!(from_hex(x) > from_hex(y), true);

        (x, y) = ("1", "1");
        assert_eq!(from_hex(x) > from_hex(y), false);

        (x, y) = ("1", "1");
        assert_eq!(from_hex(x) >= from_hex(y), true);

        (x, y) = ("3340E61CE70224FE109AA852D618FFBA53E9779C33B7782F73E55944AF6D54B75B7B537E2C57ADC8534A38433960F92DAF604D4F45FCD205280C63684FD3A711",
                  "27827BFFDE45CAF30918B836BC7AA7C9F99D26EE84C05CF3F5293B238038BA56B17057DF63B76ED964142BACA61A44E7EC562B371722A383D3F814C67D563E2E");
        assert_eq!(from_hex(x) > from_hex(y), true);

        (x,y) = ("3340E61CE70224FE109AA852D618FFBA53E9779C33B7782F73E55944AF6D54B75B7B537E2C57ADC8534A38433960F92DAF604D4F45FCD205280C63684FD3A711",
                 "4440E61CE70224FE109AA852D618FFBA53E9779C33B7782F73E55944AF6D54B75B7B537E2C57ADC8534A38433960F92DAF604D4F45FCD205280C63684FD3A711");
        assert_eq!(from_hex(x) < from_hex(y), true);

        (x,y) = ("3340E61CE70224FE109AA852D618FFBA53E9779C33B7782F73E55944AF6D54B75B7B537E2C57ADC8534A38433960F92DAF604D4F45FCD205280C63684FD3A711",
                 "3340E61CE70224FE109AA852D618FFBA53E9779C33B7782F73E55944AF6D54B75B7B537E2C57ADC8534A38433960F92DAF604D4F45FCD205280C63684FD3A711");
        assert_eq!(from_hex(x) == from_hex(y), true);

        (x,y) = ("3340E61CE70224FE109AA852D618FFBA53E9779C33B7782F73E55944AF6D54B75B7B537E2C57ADC8534A3 7 433960F92DAF604D4F45FCD205280C63684FD3A711",
                 "3440E61CE70224FE109AA852D618FFBA53E9779C33B7782F73E55944AF6D54B75B7B537E2C57ADC8534A3 0 433960F92DAF604D4F45FCD205280C63684FD3A711");
        assert_eq!(from_hex(x) < from_hex(y), true);

        (x,y) = ("3340E61CE70224FE109AA852D618FFBA53E9779C33B7782F73E55944AF6D54B75B7B537E2C57ADC8534A3 7 433960F92DAF604D4F45FCD205280C63684FD3A711",
                 "3440E61CE70224FE109AA852D618FFBA53E9779C33B7782F73E55944AF6D54B75B7B537E2C57ADC8534A3 0 433960F92DAF604D4F45FCD205280C63684FD3A711");
        assert_eq!(from_hex(x) <= from_hex(y), true);

        (x, y) = ("12345", "123456");
        assert_eq!(from_hex(x) < from_hex(y), true);
        (x, y) = ("123456", "1234567");
        assert_eq!(from_hex(x) < from_hex(y), true);
        (x, y) = ("12345", "1234567");
        assert_eq!(from_hex(x) < from_hex(y), true);

        (x, y) = ("12345", "123456");
        assert_eq!(from_hex(x) > from_hex(y), false);
        (x, y) = ("123456", "1234567");
        assert_eq!(from_hex(x) > from_hex(y), false);
        (x, y) = ("12345", "1234567");
        assert_eq!(from_hex(x) > from_hex(y), false);

        (x, y) = ( "1B28221966C0930D786A764765B66700174DF3BF740FCFC5523E1E793E65A60AA5E626D556B6CB7AD5BD8F2FB4EABBB17DA3C4627FC2C4A0F25DBEE4D17994E50D53B048F29B8EB405E82F9F7C716834BFC19C7F3DC2CE3473A36634A149AA742289352180865297A8CCD1BC46758D47E2B39D9DDDEAB8EAC67A758D449B5FA7F28E5D209AA83431F8B92E2C1D70213441983BFDF14909A20EFF29E1DA7517158CE1B43BF38B7FB2B8C0A85CCE376DF4B597EEDD180289542033CDB90214214592BD5EADB75FA3CB6489E720C7ABD3AC0865263376D452B24386BBA2A08F7D6BB3AF0A232B4BC383651C6FD79AD7FD5B0F8E7B8B5F2E2C766E883C8296EB5EC2",
                   "758D449B5FA7F28E5D209AA83431F8B92E2C1D70213441983BFDF14909A20EFF29E1DA7517158CE1B43BF38B7FB2B8C0A85CCE376DF4B597EEDD180289542033CDB90214214592BD5EADB75FA3CB6489E720C7ABD3AC0865263376D452B24386BBA2A08F7D6BB3AF0A232B4BC383651C6FD79AD7FD5B0F8E7B8B5F2E2C766E883C8296EB5EC21B28221966C0930D786A764765B66700174DF3BF740FCFC5523E1E793E65A60AA5E626D556B6CB7AD5BD8F2FB4EABBB17DA3C4627FC2C4A0F25DBEE4D17994E50D53B048F29B8EB405E82F9F7C716834BFC19C7F3DC2CE3473A36634A149AA742289352180865297A8CCD1BC46758D47E2B39D9DDDEAB8EAC67A",
        );
        assert_eq!(from_hex(x) < from_hex(y), true);
        assert_eq!(from_hex(x) <= from_hex(y), true);
        assert_eq!(from_hex(x) > from_hex(y), false);
        assert_eq!(from_hex(x) >= from_hex(y), false);
        assert_eq!(from_hex(x) != from_hex(y), true);
        assert_eq!(from_hex(x) == from_hex(y), false);

        (x,y) = ("758d449b5fa7f28e5d209aa83431f8b92e2c1d70213441983bfdf14909a20eff29e1da7517158ce1b43bf38b7fb2b8c0a85cce376df4b597eedd180289542033cdb90214214592bd5eadb75fa3cb6489e720c7abd3ac0865263376d452b24386bba2a08f7d6bb3af0a232b4bc383651c6fd79ad7fd5b0f8e7b8b5f2e2c766e883c8296eb5ec21b28221966c0930d786a764765b66700174df3bf740fcfc5523e1e793e65a60aa5e626d556b6cb7ad5bd8f2fb4eabbb17da3c4627fc2c4a0f25dbee4d17994e50d53b048f29b8eb405e82f9f7c716834bfc19c7f3dc2ce3473a36634a149aa742289352180865297a8ccd1bc46758d47e2b39d9dddeab8eac67a",
                     "9181dbce994dac85566fca0cc60f56a5abc1ca498862554b8ba6448769b94e2ec6a4a0032fc86892127406b8c3fcae74a945ff3c92ebc41e927e2a595b72a53b57210ccd85102dfa79bd8457d1bd3ce37addaf1d383141f53f2e7897aed3d5a3525c9bb40b6ebd611f676881337d757885009e635253f5b80ffb79140c913a3e");
        assert_eq!(from_hex(x) >= from_hex(y), true);

        (x,y) = ("758d449b5fa7f28e5d209aa83431f8b92e2c1d70213441983bfdf14909a20eff29e1da7517158ce1b43bf38b7fb2b8c0a85cce376df4b597eedd180289542033cdb90214214592bd5eadb75fa3cb6489e720c7abd3ac0865263376d452b24386bba2a08f7d6bb3af0a232b4bc383651c6fd79ad7fd5b0f8e7b8b5f2e2c766e883c8296eb5ec21b28221966c0930d786a764765b66700174df3bf740fcfc5523e1e793e65a60aa5e626d556b6cb7ad5bd8f2fb4eabbb17da3c4627fc2c4a0f25dbee4d17994e50d53b048f29b8eb405e82f9f7c716834bfc19c7f3dc2ce3473a36634a149aa742289352180865297a8ccd1bc46758d47e2b39d9dddeab8eac67a",
                     "48c0ede74ca6d642ab37e5066307ab52d5e0e524c4312aa5c5d32243b4dca7176352500197e43449093a035c61fe573a54a2ff9e4975e20f493f152cadb9529dab908666c28816fd3cdec22be8de9e71bd6ed78e9c18a0fa9f973c4bd769ead1a92e4dda05b75eb08fb3b44099bebabc42804f31a929fadc07fdbc8a06489d1f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
        assert_eq!(from_hex(x) < from_hex(y), false)
    }

    #[test]
    fn test_addition() {
        let (mut x, mut y, mut z) = ("1", "0", "1");
        assert_eq!(from_hex(x) + from_hex(y), from_hex(z));

        ( x, y, z) = ("CED0F6B3027C4C0ED408A03EDC3011F72B9813BC664230CC5A831DA31C2D7E22B83E7E7DF3631A8CD55C3BCF00EC9EEDBAD11F0B2BA8854E7C7EFD2FE7FD0EAAF9F1B13297A99D396562777A0AEAEE7CAA0A3EFC4A1BB7685647FC25FBCB6D3D8B1EE4788248F0714932168D2BF19A3D0E078BCFF0AF4F64A14032AA67931823",
                      "9181DBCE994DAC85566FCA0CC60F56A5ABC1CA498862554B8BA6448769B94E2EC6A4A0032FC86892127406B8C3FCAE74A945FF3C92EBC41E927E2A595B72A53B57210CCD85102DFA79BD8457D1BD3CE37ADDAF1D383141F53F2E7897AED3D5A3525C9BB40B6EBD611F676881337D757885009E635253F5B80FFB79140C913A3E",
                      "16052D2819BC9F8942A786A4BA23F689CD759DE05EEA48617E629622A85E6CC517EE31E81232B831EE7D04287C4E94D6264171E47BE94496D0EFD2789436FB3E65112BE001CB9CB33DF1FFBD1DCA82B6024E7EE19824CF95D957674BDAA9F42E0DD7B802C8DB7ADD268997F0E5F6F0FB593082A334303451CB13BABBE74245261");
        assert_eq!(from_hex(x) + from_hex(y), from_hex(z));

        ( x, y, z) = ("3340E61CE70224FE109AA852D618FFBA53E9779C33B7782F73E55944AF6D54B75B7B537E2C57ADC8534A38433960F92DAF604D4F45FCD205280C63684FD3A711",
                      "27827BFFDE45CAF30918B836BC7AA7C9F99D26EE84C05CF3F5293B238038BA56B17057DF63B76ED964142BACA61A44E7EC562B371722A383D3F814C67D563E2E",
                      "5AC3621CC547EFF119B360899293A7844D869E8AB877D523690E94682FA60F0E0CEBAB5D900F1CA1B75E63EFDF7B3E159BB678865D1F7588FC04782ECD29E53F");
        assert_eq!(from_hex(x) + from_hex(y), from_hex(z));

        ( x, y, z) = ("4663B71E775123B4C7FAFAEAF3309A8124ED8CB69EF1099325470D4E97FFD2BBC984A219036983FB14DA13C32AC21131F711584E231E9836A8AE3178EE29A1D93E59C3014B2806FD1A2DA95C3F6DC3AC0DA016362257FF669BE93BFCCA95871F920B2240B63E6DE86BB4A554C7E6C4032EDED9DB055A76932EDD1B36AE2B8D6D4B7E4B60B213B92E0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                      "CE9672755BDB975F0A1E31BFA9F37320976E75BA7ACE69C1DB5509CA3E73BB5782FCC0C89518E14786AE8CF1246CB69D0D1338B863E5A5A1879B19DBC763E60B51C9E084E4B95639039D100A86C9C4148D2A81F75C93F21D55525793734C03E56E5A9D45E96783AC950E12A5A4C6F2AE5B8C4368859F35672E624E64C1C0A8B9D9DDDEAB8EAC67A",
                      "4663b71e775123b4c7fafaeaf3309a8124ed8cb69ef1099325470d4e97ffd2bbc984a219036983fb14da13c32ac21131f711584e231e9836b59798a043e75b4f2efba61d45c73e2f23a490b7e71aaa482b5566d2c63f3b1c1419080953e715340a760b0fc88539523c85d8e04e251e5d47588b78c1d0b4f3e3f9b93efc7722d0dbb81c615a80556f48d2a81f75c93f21d55525793734c03e56e5a9d45e96783ac950e12a5a4c6f2ae5b8c4368859f35672e624e64c1c0a8b9d9dddeab8eac67a");
        assert_eq!(from_hex(x) + from_hex(y), from_hex(z));
    }

    #[test]
    fn test_subtraction() {
        let (mut x, mut y, mut z) = ("1", "0", "1");
        assert_eq!(from_hex(x) - from_hex(y), from_hex(z));

        (x, y, z) = ("1", "1", "0");
        assert_eq!(from_hex(x) - from_hex(y), from_hex(z));

        (x, y, z) = ("22345678 22345678", "12345678 12345678", "1000000010000000");
        assert_eq!(from_hex(x) - from_hex(y), from_hex(z));

        ( x, y, z) = ("CED0F6B3027C4C0ED408A03EDC3011F72B9813BC664230CC5A831DA31C2D7E22B83E7E7DF3631A8CD55C3BCF00EC9EEDBAD11F0B2BA8854E7C7EFD2FE7FD0EAAF9F1B13297A99D396562777A0AEAEE7CAA0A3EFC4A1BB7685647FC25FBCB6D3D8B1EE4788248F0714932168D2BF19A3D0E078BCFF0AF4F64A14032AA67931823",
                      "9181DBCE994DAC85566FCA0CC60F56A5ABC1CA498862554B8BA6448769B94E2EC6A4A0032FC86892127406B8C3FCAE74A945FF3C92EBC41E927E2A595B72A53B57210CCD85102DFA79BD8457D1BD3CE37ADDAF1D383141F53F2E7897AED3D5A3525C9BB40B6EBD611F676881337D757885009E635253F5B80FFB79140C913A3E",
                      "3D4F1AE4692E9F897D98D6321620BB517FD64972DDDFDB80CEDCD91BB2742FF3F199DE7AC39AB1FAC2E835163CEFF079118B1FCE98BCC12FEA00D2D68C8A696FA2D0A46512996F3EEBA4F322392DB1992F2C8FDF11EA75731719838E4CF7979A38C248C476DA331029CAAE0BF87424C48906ED6C9E5B59AC9144B9965B01DDE5");
        assert_eq!(from_hex(x) - from_hex(y), from_hex(z));

        ( x, y, z) = ("3340E61CE70224FE109AA852D618FFBA53E9779C33B7782F73E55944AF6D54B75B7B537E2C57ADC8534A38433960F92DAF604D4F45FCD205280C63684FD3A711",
                      "27827BFFDE45CAF30918B836BC7AA7C9F99D26EE84C05CF3F5293B238038BA56B17057DF63B76ED964142BACA61A44E7EC562B371722A383D3F814C67D563E2E",
                      "BBE6A1D08BC5A0B0781F01C199E57F05A4C50ADAEF71B3B7EBC1E212F349A60AA0AFB9EC8A03EEEEF360C969346B445C30A22182EDA2E8154144EA1D27D68E3");
        println!("1: {:?}", from_hex(x));
        println!("2: {:?}", from_hex(y));
        assert_eq!(from_hex(x) - from_hex(y), from_hex(z));

        ( x, y, z) = (
            "758D449B5FA7F28E5D209AA83431F8B92E2C1D70213441983BFDF14909A20EFF29E1DA7517158CE1B43BF38B7FB2B8C0A85CCE376DF4B597EEDD180289542033CDB90214214592BD5EADB75FA3CB6489E720C7ABD3AC0865263376D452B24386BBA2A08F7D6BB3AF0A232B4BC383651C6FD79AD7FD5B0F8E7B8B5F2E2C766E883C8296EB5EC21B28221966C0930D786A764765B66700174DF3BF740FCFC5523E1E793E65A60AA5E626D556B6CB7AD5BD8F2FB4EABBB17DA3C4627FC2C4A0F25DBEE4D17994E50D53B048F29B8EB405E82F9F7C716834BFC19C7F3DC2CE3473A36634A149AA742289352180865297A8CCD1BC46758D47E2B39D9DDDEAB8EAC67A",
            "1B28221966C0930D786A764765B66700174DF3BF740FCFC5523E1E793E65A60AA5E626D556B6CB7AD5BD8F2FB4EABBB17DA3C4627FC2C4A0F25DBEE4D17994E50D53B048F29B8EB405E82F9F7C716834BFC19C7F3DC2CE3473A36634A149AA742289352180865297A8CCD1BC46758D47E2B39D9DDDEAB8EAC67A758D449B5FA7F28E5D209AA83431F8B92E2C1D70213441983BFDF14909A20EFF29E1DA7517158CE1B43BF38B7FB2B8C0A85CCE376DF4B597EEDD180289542033CDB90214214592BD5EADB75FA3CB6489E720C7ABD3AC0865263376D452B24386BBA2A08F7D6BB3AF0A232B4BC383651C6FD79AD7FD5B0F8E7B8B5F2E2C766E883C8296EB5EC2",
            "5a652281f8e75f80e4b62460ce7b91b916de29b0ad2471d2e9bfd2cfcb3c68f483fbb39fc05ec166de7e645bcac7fd0f2ab909d4ee31f0f6fc7f591db7da8b4ec06551cb2eaa040958c587c02759fc55275f2b2c95e93a30b290109fb168991299196b6dfce561176156598f7d0dd7d48d23fd3a1f7056a3b510e9a0e7db0ee049f439cac419e6f629603894759d573634af29b875b70dabe4c04a2df5503b2891978a29b27f26336e14ae59fd4367c8d997c60da3aef44fa42eb209c28cd1182c2772cbdd8569884bbf0b7ac708323c273a563df1606d0f58f882202da4f637b28597267f285f05d00510aeb7bfab71c22dcaea2e19b63d2f15a16821ff67b8");
        assert_eq!(from_hex(x) - from_hex(y), from_hex(z));

        ( x, y) = (
            "1B28221966C0930D786A764765B66700174DF3BF740FCFC5523E1E793E65A60AA5E626D556B6CB7AD5BD8F2FB4EABBB17DA3C4627FC2C4A0F25DBEE4D17994E50D53B048F29B8EB405E82F9F7C716834BFC19C7F3DC2CE3473A36634A149AA742289352180865297A8CCD1BC46758D47E2B39D9DDDEAB8EAC67A758D449B5FA7F28E5D209AA83431F8B92E2C1D70213441983BFDF14909A20EFF29E1DA7517158CE1B43BF38B7FB2B8C0A85CCE376DF4B597EEDD180289542033CDB90214214592BD5EADB75FA3CB6489E720C7ABD3AC0865263376D452B24386BBA2A08F7D6BB3AF0A232B4BC383651C6FD79AD7FD5B0F8E7B8B5F2E2C766E883C8296EB5EC2",
            "758D449B5FA7F28E5D209AA83431F8B92E2C1D70213441983BFDF14909A20EFF29E1DA7517158CE1B43BF38B7FB2B8C0A85CCE376DF4B597EEDD180289542033CDB90214214592BD5EADB75FA3CB6489E720C7ABD3AC0865263376D452B24386BBA2A08F7D6BB3AF0A232B4BC383651C6FD79AD7FD5B0F8E7B8B5F2E2C766E883C8296EB5EC21B28221966C0930D786A764765B66700174DF3BF740FCFC5523E1E793E65A60AA5E626D556B6CB7AD5BD8F2FB4EABBB17DA3C4627FC2C4A0F25DBEE4D17994E50D53B048F29B8EB405E82F9F7C716834BFC19C7F3DC2CE3473A36634A149AA742289352180865297A8CCD1BC46758D47E2B39D9DDDEAB8EAC67A");
        let err = std::panic::catch_unwind(|| from_hex(x) - from_hex(y));
        assert!(err.is_err());
    }

    #[test]
    fn test_shift() {
        let (mut x, mut shift, mut z) = ("1", 4_u32, "0");
        assert_eq!(from_hex(x) >> shift, from_hex(z));

        (x, shift, z) = ("1234", 4, "123");
        assert_eq!(from_hex(x) >> shift, from_hex(z));

        (x, shift, z) = ("1122334455667788 1122334455667788", 64, "1122334455667788");
        assert_eq!(from_hex(x) >> shift, from_hex(z));

        (x, shift, z) = ("1122334455667788 1122334455667788", 64, "1122334455667788");
        assert_eq!(from_hex(x) >> shift, from_hex(z));

        (x, shift, z) = ("5a652281f8e75f80e4b62460ce7b91b916de29b0ad2471d2e9bfd2cfcb3c68f483fbb39fc05ec166de7e645bcac7fd0f2ab909d4ee31f0f6fc7f591db7da8b4ec06551cb2eaa040958c587c02759fc55275f2b2c95e93a30b290109fb168991299196b6dfce561176156598f7d0dd7d48d23fd3a1f7056a3b510e9a0e7db0ee049f439cac419e6f629603894759d573634af29b875b70dabe4c04a2df5503b2891978a29b27f26336e14ae59fd4367c8d997c60da3aef44fa42eb209c28cd1182c2772cbdd8569884bbf0b7ac708323c273a563df1606d0f58f882202da4f637b28597267f285f05d00510aeb7bfab71c22dcaea2e19b63d2f15a16821ff67b8",
                         247,
                         "b4ca4503f1cebf01c96c48c19cf723722dbc53615a48e3a5d37fa59f9678d1e907f7673f80bd82cdbcfcc8b7958ffa1e557213a9dc63e1edf8feb23b6fb5169d80caa3965d540812b18b0f804eb3f8aa4ebe56592bd274616520213f62d132253232d6dbf9cac22ec2acb31efa1bafa91a47fa743ee0ad476a21d341cfb61dc093e873958833cdec52c07128eb3aae6c695e5370eb6e1b57c980945beaa07651232f145364fe4c66dc295cb3fa86cf91b32f8c1b475de89f485d64138519a230584ee597bb0ad310977e16f58e1064784e74ac7be2c0da1eb1f104405b49ec6f65");
        assert_eq!(from_hex(x) >> shift, from_hex(z));

        (x, shift, z) = ("5a652281f8e75f80e4b62460ce7b91b916de29b0ad2471d2e9bfd2cfcb3c68f483fbb39fc05ec166de7e645bcac7fd0f2ab909d4ee31f0f6fc7f591db7da8b4ec06551cb2eaa040958c587c02759fc55275f2b2c95e93a30b290109fb168991299196b6dfce561176156598f7d0dd7d48d23fd3a1f7056a3b510e9a0e7db0ee049f439cac419e6f629603894759d573634af29b875b70dabe4c04a2df5503b2891978a29b27f26336e14ae59fd4367c8d997c60da3aef44fa42eb209c28cd1182c2772cbdd8569884bbf0b7ac708323c273a563df1606d0f58f882202da4f637b28597267f285f05d00510aeb7bfab71c22dcaea2e19b63d2f15a16821ff67b8",
                         247,
                         "2d329140fc73afc0725b1230673dc8dc8b6f14d8569238e974dfe967e59e347a41fdd9cfe02f60b36f3f322de563fe87955c84ea7718f87b7e3fac8edbed45a76032a8e597550204ac62c3e013acfe2a93af95964af49d185948084fd8b44c894c8cb5b6fe72b08bb0ab2cc7be86ebea4691fe9d0fb82b51da8874d073ed877024fa1ce5620cf37b14b01c4a3aceab9b1a5794dc3adb86d5f2602516faa81d9448cbc514d93f9319b70a572cfea1b3e46ccbe306d1d77a27d2175904e146688c1613b965eec2b4c425df85bd6384191e139d2b1ef8b03687ac7c411016d27b1bd942cb933f942f82e80288575bdfd5b8e116e575170cdb1e978ad0b410ffb3dc00000000000000000000000000000000000000000000000000000000000000");
        assert_eq!(from_hex(x) << shift, from_hex(z));

        (x, shift, z) = ("5a652281f8e75f80e4b62460ce7b91b916de29b0ad2471d2e9bfd2cfcb3c68f483fbb39fc05ec166de7e645bcac7fd0f2ab909d4ee31f0f6fc7f591db7da8b4ec06551cb2eaa040958c587c02759fc55275f2b2c95e93a30b290109fb168991299196b6dfce561176156598f7d0dd7d48d23fd3a1f7056a3b510e9a0e7db0ee049f439cac419e6f629603894759d573634af29b875b70dabe4c04a2df5503b2891978a29b27f26336e14ae59fd4367c8d997c60da3aef44fa42eb209c28cd1182c2772cbdd8569884bbf0b7ac708323c273a563df1606d0f58f882202da4f637b28597267f285f05d00510aeb7bfab71c22dcaea2e19b63d2f15a16821ff67b8",
                         247,
                         "5a652281f8e75f80e4b62460ce7b91b916de29b0ad2471d2e9bfd2cfcb3c68f483fbb39fc05ec166de7e645bcac7fd0f2ab909d4ee31f0f6fc7f591db7da8b4ec06551cb2eaa040958c587c02759fc55275f2b2c95e93a30b290109fb168991299196b6dfce561176156598f7d0dd7d48d23fd3a1f7056a3b510e9a0e7db0ee049f439cac419e6f629603894759d573634af29b875b70dabe4c04a2df5503b2891978a29b27f26336e14ae59fd4367c8d997c60da3aef44fa42eb209c28cd1182c2772cbdd8569884bbf0b7ac708323c273a563df1606d0f58f882202da4f637b28597267f285f05d00510aeb7bfab71c22dcaea2e19b63d2f15a16821ff67b8");
        assert_eq!((from_hex(x) << shift) >> shift, from_hex(z));

        (x, shift, z) = ("5a652281f8e75f80e4b62460ce7b91b916de29b0ad2471d2e9bfd2cfcb3c68f483fbb39fc05ec166de7e645bcac7fd0f2ab909d4ee31f0f6fc7f591db7da8b4ec06551cb2eaa040958c587c02759fc55275f2b2c95e93a30b290109fb168991299196b6dfce561176156598f7d0dd7d48d23fd3a1f7056a3b510e9a0e7db0ee049f439cac419e6f629603894759d573634af29b875b70dabe4c04a2df5503b2891978a29b27f26336e14ae59fd4367c8d997c60da3aef44fa42eb209c28cd1182c2772cbdd8569884bbf0b7ac708323c273a563df1606d0f58f882202da4f637b28597267f285f05d00510aeb7bfab71c22dcaea2e19b63d2f15a16821ff67b8",
                         247,
                         "5a652281f8e75f80e4b62460ce7b91b916de29b0ad2471d2e9bfd2cfcb3c68f483fbb39fc05ec166de7e645bcac7fd0f2ab909d4ee31f0f6fc7f591db7da8b4ec06551cb2eaa040958c587c02759fc55275f2b2c95e93a30b290109fb168991299196b6dfce561176156598f7d0dd7d48d23fd3a1f7056a3b510e9a0e7db0ee049f439cac419e6f629603894759d573634af29b875b70dabe4c04a2df5503b2891978a29b27f26336e14ae59fd4367c8d997c60da3aef44fa42eb209c28cd1182c2772cbdd8569884bbf0b7ac708323c273a563df1606d0f58f882202da4f637b280000000000000000000000000000000000000000000000000000000000000");
        assert_eq!((from_hex(x) >> shift) << shift, from_hex(z));

        (x, shift, z) = ("5a652281f8e75f80e4b62460ce7b91b916de29b0ad2471d2e9bfd2cfcb3c68f483fbb39fc05ec166de7e645bcac7fd0f2ab909d4ee31f0f6fc7f591db7da8b4ec06551cb2eaa040958c587c02759fc55275f2b2c95e93a30b290109fb168991299196b6dfce561176156598f7d0dd7d48d23fd3a1f7056a3b510e9a0e7db0ee049f439cac419e6f629603894759d573634af29b875b70dabe4c04a2df5503b2891978a29b27f26336e14ae59fd4367c8d997c60da3aef44fa42eb209c28cd1182c2772cbdd8569884bbf0b7ac708323c273a563df1606d0f58f882202da4f637b28597267f285f05d00510aeb7bfab71c22dcaea2e19b63d2f15a16821ff67b8",
                         1100,
                         "5a652281f8e75f80e4b62460ce7b91b916de29b0ad2471d2e9bfd2cfcb3c68f483fbb39fc05ec166de7e645bcac7fd0f2ab909d4ee31f0f6fc7f591db7da8b4ec06551cb2eaa040958c587c02759fc55275f2b2c95e93a30b290109fb168991299196b6dfce561176156598f7d0dd7d48d23fd3a1f7056a3b510e9a0e7db0ee049f439cac419e6f629603894759d573634af29b875b70dabe4c04a2df5503b2891978a29b27f26336e14ae59fd4367c8d997c60da3aef44fa42eb209c28cd1182c2772cbdd8569884bbf0b7ac708323c273a563df1606d0f58f882202da4f637b28597267f285f05d00510aeb7bfab71c22dcaea2e19b63d2f15a16821ff67b8");
        assert_eq!((from_hex(x) << shift) >> shift, from_hex(z));

        (x, shift, z) = ("5a652281f8e75f80e4b62460ce7b91b916de29b0ad2471d2e9bfd2cfcb3c68f483fbb39fc05ec166de7e645bcac7fd0f2ab909d4ee31f0f6fc7f591db7da8b4ec06551cb2eaa040958c587c02759fc55275f2b2c95e93a30b290109fb168991299196b6dfce561176156598f7d0dd7d48d23fd3a1f7056a3b510e9a0e7db0ee049f439cac419e6f629603894759d573634af29b875b70dabe4c04a2df5503b2891978a29b27f26336e14ae59fd4367c8d997c60da3aef44fa42eb209c28cd1182c2772cbdd8569884bbf0b7ac708323c273a563df1606d0f58f882202da4f637b28597267f285f05d00510aeb7bfab71c22dcaea2e19b63d2f15a16821ff67b8",
                         1100,
                         "5a652281f8e75f80e4b62460ce7b91b916de29b0ad2471d2e9bfd2cfcb3c68f483fbb39fc05ec166de7e645bcac7fd0f2ab909d4ee31f0f6fc7f591db7da8b4ec06551cb2eaa040958c587c02759fc55275f2b2c95e93a30b290109fb168991299196b6dfce561176156598f7d0dd7d48d23fd3a1f70500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
        assert_eq!((from_hex(x) >> shift) << shift, from_hex(z));

        (x, shift, z) = ("5a652281f8e75f80e4b62460ce7b91b916de29b0ad2471d2e9bfd2cfcb3c68f483fbb39fc05ec166de7e645bcac7fd0f2ab909d4ee31f0f6fc7f591db7da8b4ec06551cb2eaa040958c587c02759fc55275f2b2c95e93a30b290109fb168991299196b6dfce561176156598f7d0dd7d48d23fd3a1f7056a3b510e9a0e7db0ee049f439cac419e6f629603894759d573634af29b875b70dabe4c04a2df5503b2891978a29b27f26336e14ae59fd4367c8d997c60da3aef44fa42eb209c28cd1182c2772cbdd8569884bbf0b7ac708323c273a563df1606d0f58f882202da4f637b28597267f285f05d00510aeb7bfab71c22dcaea2e19b63d2f15a16821ff67b8",
                         1247,
                         "2d329140fc73afc0725b1230673dc8dc8b6f14d8569238e974dfe967e59e347a41fdd9cfe02f60b36f3f322de563fe87955c84ea7718f87b7e3fac8edbed45a76032a8e597550204ac62c3e013acfe2a93af95964af49d185948084fd8b44c894c8cb5b6fe72b08bb0ab2cc7be86ebea4691fe9d0fb82b51da8874d073ed877024fa1ce5620cf37b14b01c4a3aceab9b1a5794dc3adb86d5f2602516faa81d9448cbc514d93f9319b70a572cfea1b3e46ccbe306d1d77a27d2175904e146688c1613b965eec2b4c425df85bd6384191e139d2b1ef8b03687ac7c411016d27b1bd942cb933f942f82e80288575bdfd5b8e116e575170cdb1e978ad0b410ffb3dc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
        assert_eq!(from_hex(x) << shift, from_hex(z));

        (x, shift, z) = (
            "1122334455667788 1122334455667788",
            11,
            "22446688aaccef1022446688aacce",
        );
        assert_eq!(from_hex(x) >> shift, from_hex(z));

        (x, shift, z) = (
            "1122334455667788 1122334455667788",
            11,
            "89119a22ab33bc4089119a22ab33bc4000",
        );
        assert_eq!(from_hex(x) << shift, from_hex(z));
    }

    #[test]
    fn test_multiplication() {
        let (mut x, mut y, mut z) = ("1", "0", "0");
        assert_eq!(from_hex(x) * from_hex(y), from_hex(z));

        (x, y, z) = ("3340E61CE70224FE109AA852D618FFBA53E9779C33B7782F73E55944AF6D54B75B7B537E2C57ADC8534A38433960F92DAF604D4F45FCD205280C63684FD3A711",
                     "27827BFFDE45CAF30918B836BC7AA7C9F99D26EE84C05CF3F5293B238038BA56B17057DF63B76ED964142BACA61A44E7EC562B371722A383D3F814C67D563E2E",
                     "7E902D6AA93FD2E94927FA8665C7018D9B124B3B733795BAA3FECB9BA51E2CE0172D7EE05AF59150F748A71C14792655C7D92DD0C3B9DCFEE0D09E190030432635642E9558124511F380A8A608F88B1540F78AF9F02CEE515567AED0032A891616920F1D5106A2FF7F0590FD73735938EB08CB46CB69EADA88AD4E70734230E");
        assert_eq!(from_hex(x) * from_hex(y), from_hex(z));

        (x, y, z) = (
            "ced0f6b3027c4c0ed408a03edc3011f7",
            "9181dbce994dac85566fca0cc60f56a5",
            "758d449b5fa7f28e5d209aa83431f8b88aa2b97257f01e1f95e738c6287d8e33",
        );
        assert_eq!(from_hex(x) * from_hex(y), from_hex(z));

        (x, y, z) = (
            "ced0f6b3027c4c0ed408a03edc3011f7",
            "1",
            "ced0f6b3027c4c0ed408a03edc3011f7",
        );
        assert_eq!(from_hex(x) * from_hex(y), from_hex(z));

        (x, y, z) = (
            "aaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaa",
            "2",
            "155555555555555555555555555555554",
        );
        assert_eq!(from_hex(x) * from_hex(y), from_hex(z));

        (x, y, z) = ("ced0f6b3027c4c0ed408a03edc3011f72b9813bc664230cc5a831da31c2d7e22b83e7e7df3631a8cd55c3bcf00ec9eedbad11f0b2ba8854e7c7efd2fe7fd0eaaf9f1b13297a99d396562777a0aeaee7caa0a3efc4a1bb7685647fc25fbcb6d3d8b1ee4788248f0714932168d2bf19a3d0e078bcff0af4f64a14032aa67931823",
                     "9181dbce994dac85566fca0cc60f56a5abc1ca498862554b8ba6448769b94e2ec6a4a0032fc86892127406b8c3fcae74a945ff3c92ebc41e927e2a595b72a53b57210ccd85102dfa79bd8457d1bd3ce37addaf1d383141f53f2e7897aed3d5a3525c9bb40b6ebd611f676881337d757885009e635253f5b80ffb79140c913a3e",
                     "758d449b5fa7f28e5d209aa83431f8b92e2c1d70213441983bfdf14909a20eff29e1da7517158ce1b43bf38b7fb2b8c0a85cce376df4b597eedd180289542033cdb90214214592bd5eadb75fa3cb6489e720c7abd3ac0865263376d452b24386bba2a08f7d6bb3af0a232b4bc383651c6fd79ad7fd5b0f8e7b8b5f2e2c766e883c8296eb5ec21b28221966c0930d786a764765b66700174df3bf740fcfc5523e1e793e65a60aa5e626d556b6cb7ad5bd8f2fb4eabbb17da3c4627fc2c4a0f25dbee4d17994e50d53b048f29b8eb405e82f9f7c716834bfc19c7f3dc2ce3473a36634a149aa742289352180865297a8ccd1bc46758d47e2b39d9dddeab8eac67a");
        assert_eq!(from_hex(x) * from_hex(y), from_hex(z));
    }

    #[test]
    fn test_division() {
        let (mut x, mut y, mut q, mut r) = ("1", "0", "0", "0");
        // let err = std::panic::catch_unwind(|| from_hex(x) / from_hex(y));
        // assert!(err.is_err());

        (x, y, q, r) = ("758d449b5fa7f28e5d209aa83431f8b92e2c1d70213441983bfdf14909a20eff29e1da7517158ce1b43bf38b7fb2b8c0a85cce376df4b597eedd180289542033cdb90214214592bd5eadb75fa3cb6489e720c7abd3ac0865263376d452b24386bba2a08f7d6bb3af0a232b4bc383651c6fd79ad7fd5b0f8e7b8b5f2e2c766e883c8296eb5ec21b28221966c0930d786a764765b66700174df3bf740fcfc5523e1e793e65a60aa5e626d556b6cb7ad5bd8f2fb4eabbb17da3c4627fc2c4a0f25dbee4d17994e50d53b048f29b8eb405e82f9f7c716834bfc19c7f3dc2ce3473a36634a149aa742289352180865297a8ccd1bc46758d47e2b39d9dddeab8eac67a",
                     "9181dbce994dac85566fca0cc60f56a5abc1ca498862554b8ba6448769b94e2ec6a4a0032fc86892127406b8c3fcae74a945ff3c92ebc41e927e2a595b72a53b57210ccd85102dfa79bd8457d1bd3ce37addaf1d383141f53f2e7897aed3d5a3525c9bb40b6ebd611f676881337d757885009e635253f5b80ffb79140c913a3e",
                     "ced0f6b3027c4c0ed408a03edc3011f72b9813bc664230cc5a831da31c2d7e22b83e7e7df3631a8cd55c3bcf00ec9eedbad11f0b2ba8854e7c7efd2fe7fd0eaaf9f1b13297a99d396562777a0aeaee7caa0a3efc4a1bb7685647fc25fbcb6d3d8b1ee4788248f0714932168d2bf19a3d0e078bcff0af4f64a14032aa67931823",
                     "0");
        assert_eq!(from_hex(x) / from_hex(y), from_hex(q));

        (x, y) = ("CED0F6B3027C4C0ED408A03EDC3011F72B9813BC664230CC5A831DA31C2D7E22B83E7E7DF3631A8CD55C3BCF00EC9EEDBAD11F0B2BA8854E7C7EFD2FE7FD0EAAF9F1B13297A99D396562777A0AEAEE7CAA0A3EFC4A1BB7685647FC25FBCB6D3D8B1EE4788248F0714932168D2BF19A3D0E078BCFF0AF4F64A14032AA67931823",
                     "9181DBCE994DAC85566FCA0CC60F56A5ABC1CA498862554B8BA6448769B94E2EC6A4A0032FC86892127406B8C3FCAE74A945FF3C92EBC41E927E2A595B72A53B57210CCD85102DFA79BD8457D1BD3CE37ADDAF1D383141F53F2E7897AED3D5A3525C9BB40B6EBD611F676881337D757885009E635253F5B80FFB79140C913A3E", );
        assert_eq!((from_hex(x) * from_hex(y)) / from_hex(y), from_hex(x));

        (x, y) = ("CED0F6B3027C4C0ED408A03EDC3011F72B9813BC664230CC5A831DA31C2D7E22B83E7E7DF3631A8CD55C3BCF00EC9EEDBAD11F0B2BA8854E7C7EFD2FE7FD0EAAF9F1B13297A99D396562777A0AEAEE7CAA0A3EFC4A1BB7685647FC25FBCB6D3D8B1EE4788248F0714932168D2BF19A3D0E078BCFF0AF4F64A14032AA67931823",
                     "9181DBCE994DAC85566FCA0CC60F56A5ABC1CA498862554B8BA6448769B94E2EC6A4A0032FC86892127406B8C3FCAE74A945FF3C92EBC41E927E2A595B72A53B57210CCD85102DFA79BD8457D1BD3CE37ADDAF1D383141F53F2E7897AED3D5A3525C9BB40B6EBD611F676881337D757885009E635253F5B80FFB79140C913A3E", );
        assert_eq!((from_hex(x) * from_hex(y)) / from_hex(x), from_hex(y));

        (x, y) = ("3340E61CE70224FE109AA852D618FFBA53E9779C33B7782F73E55944AF6D54B75B7B537E2C57ADC8534A38433960F92DAF604D4F45FCD205280C63684FD3A711",
                     "27827BFFDE45CAF30918B836BC7AA7C9F99D26EE84C05CF3F5293B238038BA56B17057DF63B76ED964142BACA61A44E7EC562B371722A383D3F814C67D563E2E");
        assert_eq!((from_hex(x) * from_hex(y)) / from_hex(y), from_hex(x));

        (x, y) = ("3340E61CE70224FE109AA852D618FFBA53E9779C33B7782F73E55944AF6D54B75B7B537E2C57ADC8534A38433960F92DAF604D4F45FCD205280C63684FD3A711",
                     "27827BFFDE45CAF30918B836BC7AA7C9F99D26EE84C05CF3F5293B238038BA56B17057DF63B76ED964142BACA61A44E7EC562B371722A383D3F814C67D563E2E");
        assert_eq!((from_hex(x) * from_hex(y)) / from_hex(x), from_hex(y));
    }
    #[test]
    fn test_mod() {
        let (mut x, mut y, mut m, mut r) = ("1", "0", "0", "0");
        // assert_eq!(from_hex(x) % from_hex(y), from_hex(r));

        (x, y, m, r) = ("AAAAAA",
                     "21B640A88F47E6B74DB20A899CF8A0",
                    "72216779e11d9b71fe5755524f0ffada718d",
                     "16798059e604d41aae878cd29c9eb9975a40");
        assert_eq!((from_hex(x) * from_hex(y)) % from_hex(m), from_hex(r));

        (x, y, r) = ("758d449b5fa7f28e5d209aa83431f8b92e2c1d70213441983bfdf14909a20eff29e1da7517158ce1b43bf38b7fb2b8c0a85cce376df4b597eedd180289542033cdb90214214592bd5eadb75fa3cb6489e720c7abd3ac0865263376d452b24386bba2a08f7d6bb3af0a232b4bc383651c6fd79ad7fd5b0f8e7b8b5f2e2c766e883c8296eb5ec21b28221966c0930d786a764765b66700174df3bf740fcfc5523e1e793e65a60aa5e626d556b6cb7ad5bd8f2fb4eabbb17da3c4627fc2c4a0f25dbee4d17994e50d53b048f29b8eb405e82f9f7c716834bfc19c7f3dc2ce3473a36634a149aa742289352180865297a8ccd1bc46758d47e2b39d9dddeab8eac67a",
                     "9181dbce994dac85566fca0cc60f56a5abc1ca498862554b8ba6448769b94e2ec6a4a0032fc86892127406b8c3fcae74a945ff3c92ebc41e927e2a595b72a53b57210ccd85102dfa79bd8457d1bd3ce37addaf1d383141f53f2e7897aed3d5a3525c9bb40b6ebd611f676881337d757885009e635253f5b80ffb79140c913a3e",
                     "0");
        assert_eq!(from_hex(x) % from_hex(y), from_hex(r));

        (x, y, r) = ("CED0F6B3027C4C0ED408A03EDC3011F72B9813BC664230CC5A831DA31C2D7E22B83E7E7DF3631A8CD55C3BCF00EC9EEDBAD11F0B2BA8854E7C7EFD2FE7FD0EAAF9F1B13297A99D396562777A0AEAEE7CAA0A3EFC4A1BB7685647FC25FBCB6D3D8B1EE4788248F0714932168D2BF19A3D0E078BCFF0AF4F64A14032AA67931823",
                     "9181DBCE994DAC85566FCA0CC60F56A5ABC1CA498862554B8BA6448769B94E2EC6A4A0032FC86892127406B8C3FCAE74A945FF3C92EBC41E927E2A595B72A53B57210CCD85102DFA79BD8457D1BD3CE37ADDAF1D383141F53F2E7897AED3D5A3525C9BB40B6EBD611F676881337D757885009E635253F5B80FFB79140C913A3E",
                    "3d4f1ae4692e9f897d98d6321620bb517fd64972dddfdb80cedcd91bb2742ff3f199de7ac39ab1fac2e835163ceff079118b1fce98bcc12fea00d2d68c8a696fa2d0a46512996f3eeba4f322392db1992f2c8fdf11ea75731719838e4cf7979a38c248c476da331029caae0bf87424c48906ed6c9e5b59ac9144b9965b01dde5");
        assert_eq!(((from_hex(x) * from_hex(y)) / from_hex(y)) % from_hex(y), from_hex(r));

        (x, y, r) = ("CED0F6B3027C4C0ED408A03EDC3011F72B9813BC664230CC5A831DA31C2D7E22B83E7E7DF3631A8CD55C3BCF00EC9EEDBAD11F0B2BA8854E7C7EFD2FE7FD0EAAF9F1B13297A99D396562777A0AEAEE7CAA0A3EFC4A1BB7685647FC25FBCB6D3D8B1EE4788248F0714932168D2BF19A3D0E078BCFF0AF4F64A14032AA67931823",
                     "9181DBCE994DAC85566FCA0CC60F56A5ABC1CA498862554B8BA6448769B94E2EC6A4A0032FC86892127406B8C3FCAE74A945FF3C92EBC41E927E2A595B72A53B57210CCD85102DFA79BD8457D1BD3CE37ADDAF1D383141F53F2E7897AED3D5A3525C9BB40B6EBD611F676881337D757885009E635253F5B80FFB79140C913A3E",
                    "9181dbce994dac85566fca0cc60f56a5abc1ca498862554b8ba6448769b94e2ec6a4a0032fc86892127406b8c3fcae74a945ff3c92ebc41e927e2a595b72a53b57210ccd85102dfa79bd8457d1bd3ce37addaf1d383141f53f2e7897aed3d5a3525c9bb40b6ebd611f676881337d757885009e635253f5b80ffb79140c913a3e");
        assert_eq!(((from_hex(x) * from_hex(y)) / from_hex(x)) % from_hex(x), from_hex(r));

        (x, y, r) = ("3340E61CE70224FE109AA852D618FFBA53E9779C33B7782F73E55944AF6D54B75B7B537E2C57ADC8534A38433960F92DAF604D4F45FCD205280C63684FD3A711",
                     "27827BFFDE45CAF30918B836BC7AA7C9F99D26EE84C05CF3F5293B238038BA56B17057DF63B76ED964142BACA61A44E7EC562B371722A383D3F814C67D563E2E",
                    "bbe6a1d08bc5a0b0781f01c199e57f05a4c50adaef71b3b7ebc1e212f349a60aa0afb9ec8a03eeeef360c969346b445c30a22182eda2e8154144ea1d27d68e3");
        assert_eq!(from_hex(x) % from_hex(y), from_hex(r));

        (x, y, r) = ("3340E61CE70224FE109AA852D618FFBA53E9779C33B7782F73E55944AF6D54B75B7B537E2C57ADC8534A38433960F92DAF604D4F45FCD205280C63684FD3A711",
                     "27827BFFDE45CAF30918B836BC7AA7C9F99D26EE84C05CF3F5293B238038BA56B17057DF63B76ED964142BACA61A44E7EC562B371722A383D3F814C67D563E2E",
                     "bbe6a1d08bc5a0b0781f01c199e57f05a4c50adaef71b3b7ebc1e212f349a60aa0afb9ec8a03eeeef360c969346b445c30a22182eda2e8154144ea1d27d68e3");
        assert_eq!(from_hex(x) % from_hex(y), from_hex(r));
    }



    #[test]
    fn test_pow() {
        let (mut x, mut y, mut z) = ("1", "0", "1");
        // assert_eq!(from_hex(x).pow(u128::from_str_radix(y, 16).unwrap()), from_hex(z));

        (x, y, z) = ("aa",
                     "1234",
                     "
        assert_eq!(
            from_hex(x).pow(from_hex(y)),
            from_hex(z)
        );

        (x, y, z) = ("aaaaaa",
                     "ff",
                     "72216779e11d9b71fe5755524f0ffada718d99c0e089b27405a24b7f84d5820d292b8944d46853fd8a007278162cea11a38759aa19eb1f55e339ea32cd08072ed9aa64bb65caa346c6e974bf8b710012d89c05034fe84d94d013180b4fd4899ec0dabe63243b8ffd650f53f0c4b3f30e539caf92ec67a0840fa8e46dd6e2e9eef703b3265bcd7bcf461c6ac611119fb7c1dee804f98509f481dc2a7d0fb13407e70fb8556526b4904fe2cace38e02dccaf18f9b805e660ec0a3e9e30f0121067b97096ab4d2637506fbdf0f21af64a16f31526c34c8c965fe2c6b7b0a67664b9347b08a123450108ceac7a3e6b7d4819a90c473081ae36aec47a86f1d4f4260a85cec904c5f859de48add65a19cae19239b96b477fcfffaffc2de4adcf989d03cfef90d33c8252653268221cac17cc2d25a1ecb14b23f310830c3b3357f6f4f8d878a48d4b289c7d4114d7165208532cf6b1f5d49214fa27a4900b4b8017f650cbb4912eea7aaa5d8c63dd64964a20b46cdccde3b2a007a9f2102dfc66bc177a2b690461bb7c92e428d6a3cab1746aa2a51c01f98e88a226e48f44ceff24a8f2e5e28dc90277a925352259e19c428221519ac8c33fbedb66dc073a93854a518c633c172c2992ede0e2aaad0afe1d2188d2abd032ec83729cc47603adf9692c05a6a8872a5994df276eb6c4939be136e4888bf29edc9e7e4aaebd2219da917878ed346e5e1f9904baad612f923cd44e28861267641ebd57c11f6c70d081501eac7c7db6993aaa539e071ca31a81a5655050a21cb42d31b5b663df8ae0a2bb80b4efe464fb19d154250f5c2cbebc5894ea69fddae4f9293510cbfa9ce7e19ad3bb4dd496ea977e2ad0b15855154cb6e41cdad89f5b9cf1386803d180a61aee13adf30acd4521d3e50b47045c1ff9a5a048358afe73bfa1c35aab8a403c17b90cacc36c302af2a1b2f7c6afae60a55e3885fc38e573d36d935a09d07dd27b456f566ee006a7ee0a54c716dfe8000000000000000000000000000000000000000000000000000000000000000");
        assert_eq!(
            from_hex(x).pow(u128::from_str_radix(y, 16).unwrap()),
            from_hex(z)
        );

        (x, y, z) = ("ced0f6b3027c4c0ed408a03edc3011f72b9813bc664230cc5a831d",
                     "12",
                     "5804451a316bb7bfb43b68d5ac7a8898c8decbe0bb620b9c7f93cb1373d6460c23ac0f55918dd9240219116d661338825fb124997c697e0d9c76c3506a1277e2d1c651d90ac0b66cc209e092bfb598fe1b2e6487cf89ceff779bc94c78883e89dbfbd9f34dffb786b88e664ec9b930937444d64923c252f2a151670729ef8f08c6bcfc9767a2f6e64ac196b0e420b365163b4f4f4221490c491c777847a4cfa94607e67f07e1d73f6762f46ca78e6942d1025373c8d64ab9e616750dd88e47e013fcafc58dd81f145ab992b335d44ebd05596553fbb7f665e18c88879dff4a4c500d48d652d6ee6599a25e1964962546ceebe81929400995571739e7fb75c8c92f75f69b11293d18c8e10a8971226596a821199190762d80e0c27d203a8ccc4b33327adbae1bdcf9e575b8292dd5e234d55dcfd8a6c30ce9bd757df208ccbc2bdbe8086900fa8155099ed21b1040dc081d8b83af48bd6f4c84a393ddaf608ac03b45c4a3f441d30d5b12b4ab74ad83b858a6ce459f50a4cbef55ab607bcf007e437b5dd0acdf3dd77c3d2a7f259e6a4bece4931ff4640c77c0c1cc654cb1238676dcd6f2d41c5c3abfb142cb3ceec4a62752ba64c4298cf93b276994f429187247b6fa0033d04d6e0668b4b7a02faddd1c768ba64634c7133de58494a4d15881b218a0f9c89");
        assert_eq!(
            from_hex(x).pow(u128::from_str_radix(y, 16).unwrap()),
            from_hex(z)
        );
    }

    #[test]
    fn test_pow_mod() {
        let (mut x, mut y, mut module, mut z) = ("aaaaaa", "ff", "8527463", "3fca492");
        // assert_eq!(
        //     from_hex(x).pow_mod(&from_hex(y), &from_hex(module)),
        //     from_hex(z)
        // );

        // "11", "12345", "45678", "23999"

        (x, y, module, z) = ("aaaaaa",
                     "ffffff0000111",
                     "72216779e11d9b71fe5755524f0ffada718d",
                    "6bdbb68dae74e2aecfb3786cafec0883b82e");
        assert_eq!(
            from_hex(x).pow_mod(&from_hex(y), &from_hex(module)),
            from_hex(z)
        );

        (x, y, module, z) = ("5804451a316bb7bfb43b68d5ac7a8898c8decbe0bb620b9c7f93cb1373d6460c23ac0f55918dd9240219116d661338825fb124997c697e0d9c76c3506a1277e2d1c651d90ac0b66cc209e092bfb598fe1b2e6487cf89ceff779bc94c78883e89dbfbd9f34dffb786b88e664ec9b930937444d64923c252f2a151670729ef8f08c6bcfc9767a2f6e64ac196b0e420b365163b4f4f4221490c491c777847a4cfa94607e67f07e1d73f6762f46ca78e6942d1025373c8d64ab9e616750dd88e47e013fcafc58dd81f145ab992b335d44ebd05596553fbb7f665e18c88879dff4a4c500d48d652d6ee6599a25e1964962546ceebe81929400995571739e7fb75c8c92f75f69b11293d18c8e10a8971226596a821199190762d80e0c27d203a8ccc4b33327adbae1bdcf9e575b8292dd5e234d55dcfd8a6c30ce9bd757df208ccbc2bdbe8086900fa8155099ed21b1040dc081d8b83af48bd6f4c84a393ddaf608ac03b45c4a3f441d30d5b12b4ab74ad83b858a6ce459f50a4cbef55ab607bcf007e437b5dd0acdf3dd77c3d2a7f259e6a4bece4931ff4640c77c0c1cc654cb1238676dcd6f2d41c5c3abfb142cb3ceec4a62752ba64c4298cf93b276994f429187247b6fa0033d04d6e0668b4b7a02faddd1c768ba64634c7133de58494a4d15881b218a0f9c89",
                     "5804451a316bb7bfb43b68d5ac7a8898c8",
                     "FF04451a316bb7bfb43b68d5ac7a8898c8decbe0bb620b9c7f93cb1373d6460c23ac0f55918dd9240219116d661338825fb124997c697e0d9c76c3506a1277e2d1c651d90ac0b66cc209e092bfb598fe1b2e6487cf89ceff779bc94c78883e89dbfbd9f34dffb786b88e664ec9b930937444d64923c252f2a151670729ef8f08c6bcfc9767a2f6e64ac196b0e420b365163b4f4f4221490c491c777847a4cfa94607e67f07e1d73f6762f46ca78e6942d1025373c8d64ab9e616750dd88e47e013fcafc58dd81f145ab992b335d44ebd05596553fbb7f665e18c88879dff4a4c500d48d652d6ee6599a25e1964962546ceebe81929400995571739e7fb75c8c92f75f69b11293d18c8e10a8971226596a821199190762d80e0c27d203a8ccc4b33327adbae1bdcf9e575b8292dd5e234d55dcfd8a6c30ce9bd757df208ccbc2bdbe8086900fa8155099ed21b1040dc081d8b83af48bd6f4c84a393ddaf608ac03b45c4a3f441d30d5b12b4ab74ad83b858a6ce459f50a4cbef55ab607bcf007e437b5dd0acdf3dd77c3d2a7f259e6a4bece4931ff4640c77c0c1cc654cb1238676dcd6f2d41c5c3abfb142cb3ceec4a62752ba64c4298cf93b276994f429187247b6fa0033d04d6e0668b4b7a02faddd1c768ba64634c7133de58494a4d15881b218a0f9c89",
                    "9b8df453a7b3a93aeaedbf6b2b0b07f70411e5681a696485958e56fad9702f3efcc4b61a7227544c18a46ece0b5582aa728d4c1c9e5a3a4a42ba787b7d912b6e67c8a732f865458dedbd00fe11cc6c0a6d0c9a4248c285cfdb8cc72c74382c64d2193d2e2dec460ab8b85030b60b4c52af05be1cd8bd3cc99a3b46acee0891d83d3938c1ce03f7efa2a180e3bb4847316ad554bc3d9010ec09d5d423bd91370e71ec12e58c51649f6b8f2f09ffcd8ef9724b6000d94dfd49b9b30d6c281f51a75c6b6a2c9962469073cc0c217418b01db2a5558c8c6d8876ad9e1ca16c8040b020b16e4682f2cc06e62569c84d64b86ec51a9edd3e934f53841da232ef032005e753d5a33b176355349c13a0fae744d33fd7973bc45cd8e95ba4717cca4e984deea456126f0e5c2ed83fb73242a1c3ef4822dbfb5ff0c3814e97e5c6132387b088b2d70b4d307e2f37eb74da816877da7513ae3f5ba995d705a4abcd81b527a02d2e46a4d3ea16540524293e976e0af003508be59b03a388525f4e280af409d7f60f705101e6e19654264def1a59cd2650256933cfc809197c2fb20c23b24d9ff81144683df0472c5cf7f5f14d1cdd2e2eff1557050269758749f222996f3053ffc5964a88fa9ddb150762bf6ec1bab17ef68140fa1d187f77f86d6881de01e5c6c2ab4b37a");
        assert_eq!(
            from_hex(x).pow_mod(&from_hex(y), &from_hex(module)),
            from_hex(z)
        );
    }



    #[test]
    fn test_primitive_cast() {
        let mut x = "ced0f6b3027c4c0e bc664230cc5a831d";
        assert_eq!(from_hex(x).to_u128().unwrap(), 0xced0f6b3027c4c0ebc664230cc5a831d_u128);
        assert_eq!(None, from_hex(x).to_u64());

        x = "ced0f6b3027c4c0e";
        assert_eq!(from_hex(x).to_u64(), Some(0xced0f6b3027c4c0e_u64));

        x = "ce";
        assert_eq!(from_hex(x).to_u32(), Some(0xce_u32));

        x = "ce";
        assert_eq!(from_hex(x).to_u16(), Some(0xce_u16));

        x = "ce";
        assert_eq!(from_hex(x).to_u8(), Some(0xce_u8));

        x = "1ed0f6b3027c4c0e bc664230cc5a831d";
        assert_eq!(from_hex(x).to_i128(), Some(0x1ed0f6b3027c4c0ebc664230cc5a831d_i128));
        assert_eq!(None, from_hex(x).to_i64());

        x = "1ed0f6b3027c4c0e";
        assert_eq!(from_hex(x).to_i64(), Some(0x1ed0f6b3027c4c0e_i64));

        x = "ce";
        assert_eq!(from_hex(x).to_i32(), Some(0xce_i32));

        x = "ce";
        assert_eq!(from_hex(x).to_i16(), Some(0xce_i16));

        x = "0e";
        assert_eq!(from_hex(x).to_i8(), Some(0x0e_i8));
    }

    fn from_hex(x: &str) -> BigUint {
        BigUint::from_str_radix(x, 16).unwrap()
    }

    fn get_binary_from_hex(x: &str) -> String {
        format!(
            "{}",
            BigUint::from_str_radix(x, 16).unwrap().to_binary_string()
        )
    }
    fn get_lower_hex(x: &str) -> String {
        format!(
            "{}",
            BigUint::from_str_radix(x, 16)
                .unwrap()
                .to_lower_hex_string()
        )
    }

    fn get_upper_hex(x: &str) -> String {
        format!(
            "{}",
            BigUint::from_str_radix(x, 16)
                .unwrap()
                .to_upper_hex_string()
        )
    }

    fn get_binary(x: &str) -> String {
        format!(
            "{}",
            BigUint::from_str_radix(x, 2).unwrap().to_binary_string()
        )
    }

    #[inline]
    fn trim_zeros<'a>(x: &'a str) -> &'a str {
        x.trim_start_matches("0")
    }
}
